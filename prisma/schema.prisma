generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  manager
  scanner
  controller
  teacher
  student
  recordStudent
  recordTeacher
}

enum gender {
  Female
  Male
}

enum userStatus {
  new
  active
  inactive
}

model user {
  id                  String                @id @default(cuid())
  role                role
  firstName           String                @default("")
  fatherName          String                @default("")
  lastName            String                @default("")
  gender              gender                @default(Female)
  age                 Int                   @default(0)
  phoneNumber         String                @default("")
  country             String                @default("")
  username            String                @unique
  balance             Int                   @default(0)
  password            String                @default("")
  chatId              String                @default("")
  socket              String                @default("")
  registerDate        DateTime              @default(now())
  startDate           DateTime?
  status              userStatus            @default(active)
  controller          user?                 @relation("students", fields: [controllerId], references: [id])
  controllerId        String?
  students            user[]                @relation("students")
  chatTo              chat[]                @relation("to")
  chatFrom            chat[]                @relation("from")
  roomTeacher         room[]                @relation("teacher")
  roomStudent         room[]                @relation("student")
  attendance          attendance[]
  roomAttendance      roomAttendance[]
  announcementStudent announcementStudent[]
  depositedBy         deposit[]             @relation("depositedBy")
  depositedTo         deposit[]             @relation("depositedTo")
  payment             payment[]

  dailyReportsAsStudent    DailyReport[]      @relation("DailyReportStudent")
  dailyReportsAsTeacher    DailyReport[]      @relation("DailyReportTeacher")
  teacherProgressAsTeacher TeacherProgress[]  @relation("TeacherProgressTeacher")
  teacherProgressAsStudent TeacherProgress[]  @relation("TeacherProgressStudent")
  shiftDataAsTeacher       ShiftTeacherData[] @relation("ShiftTeacherTeacher")
  shiftDataAsStudent       ShiftTeacherData[] @relation("ShiftTeacherStudent")
  teacherSalaryAsTeacher   teacherSalary[]    @relation("TeacherSalaryTeacher")
}

model room {
  id             String           @id @default(cuid())
  teacher        user             @relation("teacher", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId      String
  student        user             @relation("student", fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  time           String
  duration       Int
  link           String           @default("")
  updated        DateTime         @updatedAt
  roomAttendance roomAttendance[]
}

// model paymentGroup {
//   id        String        @id @default(uuid())
//   user      user          @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String
//   status    paymentStatus @default(paid)
//   img       String // Receipt image filename
//   price     Decimal       @default(0) // Custom payment amount
//   createdAt DateTime      @default(now())
//   updatedAt DateTime      @updatedAt
//   payments  payment[]
// }

// model payment {
//   id             String       @id @default(uuid())
//   paymentGroup   paymentGroup @relation(fields: [paymentGroupId], references: [id], onDelete: Cascade)
//   paymentGroupId String
//   year           Int
//   month          Int
//   createdAt      DateTime     @default(now())

//   @@unique([paymentGroupId, year, month])
// }

enum paymentStatus {
  pending
  approved
  rejected
}

model deposit {
  id           String        @id @default(uuid())
  depositedTo  user          @relation("depositedBy", fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  depositedBy  user          @relation("depositedTo", fields: [controllerId], references: [id])
  controllerId String
  amount       Int
  photo        String
  status       paymentStatus @default(pending)
  createdAt    DateTime      @default(now())
}

model payment {
  id             String   @id @default(uuid())
  user           user     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  perMonthAmount Int
  year           Int
  month          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([studentId, year, month])
}

enum attendanceName {
  morning
  afternoon
}

model attendance {
  id     String         @id @default(uuid())
  user   user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  date   DateTime       @default(now())
  time   attendanceName
}

enum attendanceTimeName {
  morningScanStart
  morningWorkStart
  morningWorkEnd
  afternoonScanStart
  afternoonWorkStart
  afternoonWorkEnd
}

model attendanceTime {
  id    String             @id @default(uuid())
  year  Int
  month Int
  name  attendanceTimeName
  time  String

  @@unique([year, month, name])
}

model roomAttendance {
  id     String   @id @default(uuid())
  user   user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  room   room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId String
  date   DateTime @default(now())
}

enum skipDateName {
  wholeDay
  morning
  afternoon
}

model skipDate {
  id   String       @id @default(uuid())
  date DateTime
  name skipDateName
}

model deduction {
  id     String  @id @default(uuid())
  year   Int
  month  Int
  whole  Decimal
  minute Decimal

  @@unique([year, month])
}

model chat {
  id        String   @id @default(cuid())
  from      user     @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        user     @relation("to", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
}

// Record ----------------------------------------------------------

// model group {
//   id           String         @id @default(cuid())
//   chatId       String         @unique
//   username     String
//   name         String         @default("")
//   groupTeacher groupTeacher[]
//   groupStudent groupStudent[]
// }

// model groupTeacher {
//   id        String @id @default(cuid())
//   teacher   user   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
//   teacherId String
//   group     group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
//   groupId   String
// }

// model groupStudent {
//   id        String @id @default(cuid())
//   student   user   @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   studentId String
//   group     group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
//   groupId   String
// }

// enum progressStatus {
//   sent
//   replayed
// }

// model progress {
//   id                String         @id @default(cuid())
//   student           user           @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   studentId         String
//   sentTime          DateTime       @default(now())
//   sentMessageId     String
//   status            progressStatus @default(sent)
//   replayedTime      DateTime?
//   replayedMessageId String?
// }

// Announcement ---------------------------------------------------

model announcement {
  id                  String                @id @default(cuid())
  text                String
  lastDate            DateTime?
  date                DateTime              @default(now())
  announcementStudent announcementStudent[]
}

model announcementStudent {
  id             String       @id @default(cuid())
  student        user         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  announcement   announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  announcementId String
}

// ===========================================
// ENUMS
// ===========================================
enum progressStatus {
  open
  closed
}

// enum paymentStatus {
//   pending
//   paid
// }

// ===========================================
// MODELS
// ===========================================

model DailyReport {
  id                 String   @id @default(uuid())
  studentId          String
  activeTeacherId    String
  teacherProgressId  String?
  shiftTeacherDataId String?
  date               DateTime @default(now())
  learningSlot       String
  learningProgress   String
  studentApproved    Boolean?

  // RELATIONS
  student          user              @relation("DailyReportStudent", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activeTeacher    user              @relation("DailyReportTeacher", fields: [activeTeacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherProgress  TeacherProgress?  @relation(fields: [teacherProgressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  shiftTeacherData ShiftTeacherData? @relation(fields: [shiftTeacherDataId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

// ===========================================
model TeacherProgress {
  id              String         @id @default(uuid())
  teacherId       String
  studentId       String
  learningCount   Int            @default(0)
  missingCount    Int            @default(0)
  totalCount      Int            @default(0)
  progressStatus  progressStatus @default(open)
  paymentStatus   paymentStatus  @default(pending)
  learningSlot    String?
  createdAt       DateTime       @default(now())
  teacherSalaryId String?

  // RELATIONS
  teacher       user              @relation("TeacherProgressTeacher", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student       user              @relation("TeacherProgressStudent", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherSalary teacherSalary?    @relation(fields: [teacherSalaryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  shiftData     ShiftTeacherData?
  dailyReports  DailyReport[]
}

// ===========================================
model ShiftTeacherData {
  id                 String         @id @default(uuid())
  teacherId          String
  studentId          String
  learningCount      Int
  missingCount       Int
  totalCount         Int
  progressStatus     progressStatus @default(closed)
  paymentStatus      paymentStatus  @default(pending)
  learningSlot       String?
  createdAt          DateTime       @default(now())
  originalProgressId String?        @unique
  teacherSalaryId    String?

  // RELATIONS
  teacher          user             @relation("ShiftTeacherTeacher", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student          user             @relation("ShiftTeacherStudent", fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherSalary    teacherSalary?   @relation(fields: [teacherSalaryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  originalProgress TeacherProgress? @relation(fields: [originalProgressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dailyReports     DailyReport[]
}

model teacherSalary {
  id                  String        @id @default(uuid())
  teacherId           String
  month               Int
  year                Int
  unitPrice           Int
  totalDayForLearning Int
  amount              Int
  date                DateTime      @default(now())
  status              paymentStatus @default(pending)

  createdAt DateTime @default(now())

  // RELATIONS
  teacher           user               @relation("TeacherSalaryTeacher", fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teacherProgresses TeacherProgress[]
  shiftTeacherData  ShiftTeacherData[]
}
